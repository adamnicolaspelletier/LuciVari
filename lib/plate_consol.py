

###                                            -*- Mode: Python -*-
###                                            -*- coding UTF-8 -*-
### plate_consol.py
### Copyright 2017 Institut de Recherche en Immunologie et Cancerologie (IRIC)
### Author :  Adam-Nicolas Pelletier
### Last modified On: 2017-09-22
### Version 1.0

import numpy as np
import os
import sys
import scipy as sp 





def lucif_conso_plate(rawtemp):
	""" Takes a text file of plate oriented luciferase readings generated by the FlexStation II at IRIC, and averages the values to a single plate.
	Useful when using the option of multiple readings per well """
	
	raw = []
	for i in rawtemp:
			a = i
			a = a.replace("\n", "").replace("\r", "")
			raw.append(a)

	cleaned = []
	for i in raw:
		cleaned.append(i.split("\t"))

	count_plates = 0
	for i in cleaned:
		if i[0] == "":
			pass
		else:
			count_plates +=1

	plate_dict = {}
	plateno = 1
	temp_list = []

	index_stop = {}
	index_start = 1
	for i in xrange(count_plates):
		index_stop[i +1] = index_start +8
		index_start = index_start +9
	


	for i in xrange(len(cleaned)): 
		
		if len(cleaned[i]) < len(cleaned[0]):
			pass 
			#plate_dict[plateno] = temp_list

		elif i == 0:
			header = cleaned[i][2:]

		elif i <= index_stop[plateno]:
			temp_list.append(cleaned[i][2:])

		elif i == len(cleaned):
			line_count = i
			empty_line = ['', '','','','','','','','','','','']
			while line_count <= index_stop[plateno]:
				temp_list.append(empty_line) 

			plate_dict[plateno] = temp_list
		else:
			plate_dict[plateno] = temp_list
			temp_list = [cleaned[i][2:]]
			plateno += 1


	plate_np = []



	for i in plate_dict:
		new_list = [[element or '0.00' for element in sublist] for sublist in plate_dict[i]]
		plate_np.append(np.array(new_list).astype(np.float))

	
	plate_np_ave = np.sum(plate_np, axis=0) / count_plates
	plate_ave_list = [header]


	for i in plate_np_ave:
		plate_ave_list.append(map(str,list(i)))


	plate_ave_str = []
	for i in plate_ave_list:
		plate_ave_str.append("\t".join(i))

	
	return plate_ave_str


def lucif_plate_merge(firefly_consol, renilla_consol, outfilename):
	ff = firefly_consol
	rn = renilla_consol
	outfile = outfilename

	with open(outfile, "w") as handle:
		handle.write("Firefly"+"\t"*14+"Renilla"+"\t"*12+"\n")

	for i in xrange(len(ff)):
		with open(outfile, "a") as handle:
			handle.write(ff[i] + "\t\t\t" + rn[i] + "\n")




#lucif_plate_merge(luciffile2,luciffile2)
